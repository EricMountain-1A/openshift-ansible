---
# TODO: when we are ready to go to ansible 1.9+ support only, we can update to
# the gce task to use the disk_auto_delete parameter to avoid having to delete
# the disk as a separate step on termination

# TODO: modify machine_image based on deployment_type
# - set_fact:
#     machine_type: "{{ lookup('env', 'gce_machine_type') |default('n1-standard-1', true) }}"
#     machine_image: "{{ lookup('env', 'gce_machine_image') |default('libra-rhel7', true) }}"

- name: Create SSH key pair
  nova_keypair:
    name: '{{ cluster }}_key'

# - name: Create base image
#   glance_image:
#     name: centos
#     copy_from: http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.raw
#     disk_format: raw
#     is_public: no
#     timeout: 1800

- name: Create network
  quantum_network:
    name: '{{ cluster }}_net'
    shared: no

# - name: Create subnet
#   quantum_subnet:
#     name: '{{ cluster }}_subnet'
#     network_name: '{{ cluster }}_net'
#     cidr: 192.168.{{ 1048576 | random % 256 }}.0/24

# - name: Create router
#   quantum_router:
#     name: '{{ cluster }}_router'

- name: Keypair
  nova_keypair:
    name: '{{ cluster }}_keypair'
    public_key: '{{ lookup("file","~/.ssh/id_rsa.pub") }}'

- name: Security group
  neutron_sec_group:
    name: '{{ cluster }}_sec_group'
    state: 'present'
    description: '{{ cluster }} security group'



- name: Launch instance(s)
  nova_compute:
    name: '{{ item }}'
    image_name: centos-70-raw
    key_name: 'Eric Mountain'
    flavor_id: 2
    security_groups: '{{ cluster }}_security_group'
    # nics:
    #   - [ '6184d361-fad8-4167-9e82-cc36cf59b0f0' ]
    #auto_floating_ip: yes
    floating_ip_pools: 'external'
  with_items: '{{ instances }}'

- fail:
    msg: "THE END"

- name: Launch instance(s)
  gce:
    instance_names: "{{ instances }}"
    machine_type: "{{ machine_type }}"
    image: "{{ machine_image }}"
    service_account_email: "{{ lookup('env', 'gce_service_account_email_address') }}"
    pem_file: "{{ lookup('env', 'gce_service_account_pem_file_path') }}"
    project_id: "{{ lookup('env', 'gce_project_id') }}"
    tags:
      - created-by-{{ lookup('env', 'LOGNAME') |default(cluster, true) }}
      - env-{{ cluster }}
      - host-type-{{ type }}
      - env-host-type-{{ cluster }}-openshift-{{ type }}
      - deployment-type-{{ deployment_type }}
  register: gce

- name: Add new instances to groups and set variables needed
  add_host:
    hostname: "{{ item.name }}"
    ansible_ssh_host: "{{ item.public_ip }}"
    ansible_ssh_user: root
    groups: "{{ item.tags | oo_prepend_strings_in_list('tag_') | join(',') }}"
    gce_public_ip: "{{ item.public_ip }}"
    gce_private_ip: "{{ item.private_ip }}"
  with_items: gce.instance_data

- name: Wait for ssh
  wait_for: port=22 host={{ item.public_ip }}
  with_items: gce.instance_data

- name: Wait for root user setup
  command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null root@{{ item.public_ip }} echo root user is setup"
  register: result
  until: result.rc == 0
  retries: 20
  delay: 10
  with_items: gce.instance_data
